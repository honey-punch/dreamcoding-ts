import LinkedList from './LinkedList';
/**
 * The class which represents one link or node in a linked list
 * ```ts
 * const node = new LinkedListNode(1, null, null, null);
 * ```
 */
export default class LinkedListNode<NodeData = any> {
    /** Data stored on the node */
    data: NodeData;
    /** The previous node in the list */
    prev: LinkedListNode<NodeData> | null;
    /** The next link in the list */
    next: LinkedListNode<NodeData> | null;
    /** The list this node belongs to */
    list: LinkedList<NodeData> | null;
    constructor(
    /** Data stored on the node */
    data: NodeData, 
    /** The previous node in the list */
    prev: LinkedListNode<NodeData> | null, 
    /** The next link in the list */
    next: LinkedListNode<NodeData> | null, 
    /** The list this node belongs to */
    list: LinkedList<NodeData> | null);
    /**
     * Alias to .data
     * ```ts
     * new LinkedList(1, 2, 3).head.value; // 1
     * ```
     */
    readonly value: NodeData;
    /**
     * Get the index of this node
     * ```ts
     * new LinkedList(1, 2, 3).head.index; // 0
     * ```
     */
    readonly index: number | undefined;
    /**
     * Insert a new node before this one
     * ```ts
     * new LinkedList(2, 3).head.insertBefore(1); // 1 <=> 2 <=> 3
     * ```
     * @param data Data to save in the node
     */
    insertBefore(data: NodeData): LinkedList<NodeData>;
    /**
     * Insert new data after this node
     * ```ts
     * new LinkedList(1, 2).tail.insertAfter(3); // 1 <=> 2 <=> 3
     * ```
     * @param data Data to be saved in the node
     */
    insertAfter(data: NodeData): LinkedList<NodeData>;
    /**
     * Remove this node
     * ```ts
     * new LinkedList(1, 2, 3, 4).tail.remove(); // 1 <=> 2 <=> 3
     * ```
     */
    remove(): LinkedListNode<NodeData>;
}
